// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: gamification.sql

package sqlc

import (
	"context"
)

const createGamification = `-- name: CreateGamification :one
INSERT INTO gamification (name, score, avatar)
VALUES ($1, $2, $3)
RETURNING id, name, score, avatar
`

type CreateGamificationParams struct {
	Name   string
	Score  int32
	Avatar []byte
}

func (q *Queries) CreateGamification(ctx context.Context, arg CreateGamificationParams) (Gamification, error) {
	row := q.db.QueryRow(ctx, createGamification, arg.Name, arg.Score, arg.Avatar)
	var i Gamification
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Score,
		&i.Avatar,
	)
	return i, err
}

const deleteGamification = `-- name: DeleteGamification :execrows
DELETE FROM gamification
WHERE id = $1
`

func (q *Queries) DeleteGamification(ctx context.Context, id int32) (int64, error) {
	result, err := q.db.Exec(ctx, deleteGamification, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const deleteGamificationAll = `-- name: DeleteGamificationAll :execrows
DELETE FROM gamification
`

func (q *Queries) DeleteGamificationAll(ctx context.Context) (int64, error) {
	result, err := q.db.Exec(ctx, deleteGamificationAll)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getAllGamification = `-- name: GetAllGamification :many

SELECT id, name, score, avatar
FROM gamification
`

// CRUD
func (q *Queries) GetAllGamification(ctx context.Context) ([]Gamification, error) {
	rows, err := q.db.Query(ctx, getAllGamification)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Gamification
	for rows.Next() {
		var i Gamification
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Score,
			&i.Avatar,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllGamificationByScore = `-- name: GetAllGamificationByScore :many
SELECT id, name, score, avatar
FROM gamification
ORDER BY score DESC
`

func (q *Queries) GetAllGamificationByScore(ctx context.Context) ([]Gamification, error) {
	rows, err := q.db.Query(ctx, getAllGamificationByScore)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Gamification
	for rows.Next() {
		var i Gamification
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Score,
			&i.Avatar,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGamificationScore = `-- name: UpdateGamificationScore :one


UPDATE gamification
SET score = $1
WHERE id = $2
RETURNING id, name, score, avatar
`

type UpdateGamificationScoreParams struct {
	Score int32
	ID    int32
}

// Other
func (q *Queries) UpdateGamificationScore(ctx context.Context, arg UpdateGamificationScoreParams) (Gamification, error) {
	row := q.db.QueryRow(ctx, updateGamificationScore, arg.Score, arg.ID)
	var i Gamification
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Score,
		&i.Avatar,
	)
	return i, err
}
