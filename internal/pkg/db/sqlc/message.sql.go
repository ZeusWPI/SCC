// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: message.sql

package sqlc

import (
	"context"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO message (name, ip, message)
VALUES (?, ?, ?)
RETURNING id, name, ip, message, created_at
`

type CreateMessageParams struct {
	Name    string
	Ip      string
	Message string
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRowContext(ctx, createMessage, arg.Name, arg.Ip, arg.Message)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Ip,
		&i.Message,
		&i.CreatedAt,
	)
	return i, err
}

const deleteMessage = `-- name: DeleteMessage :execrows
DELETE FROM message
WHERE id = ?
`

func (q *Queries) DeleteMessage(ctx context.Context, id int64) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteMessage, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getAllMessages = `-- name: GetAllMessages :many

SELECT id, name, ip, message, created_at
FROM message
`

// CRUD
func (q *Queries) GetAllMessages(ctx context.Context) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getAllMessages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Ip,
			&i.Message,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLastMessage = `-- name: GetLastMessage :one


SELECT id, name, ip, message, created_at
FROM message
ORDER BY id DESC
LIMIT 1
`

// Other
func (q *Queries) GetLastMessage(ctx context.Context) (Message, error) {
	row := q.db.QueryRowContext(ctx, getLastMessage)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Ip,
		&i.Message,
		&i.CreatedAt,
	)
	return i, err
}

const getMessageByID = `-- name: GetMessageByID :one
SELECT id, name, ip, message, created_at
FROM message
WHERE id = ?
`

func (q *Queries) GetMessageByID(ctx context.Context, id int64) (Message, error) {
	row := q.db.QueryRowContext(ctx, getMessageByID, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Ip,
		&i.Message,
		&i.CreatedAt,
	)
	return i, err
}

const getMessageSinceID = `-- name: GetMessageSinceID :many
SELECT id, name, ip, message, created_at
FROM message
WHERE id > ?
ORDER BY created_at ASC
`

func (q *Queries) GetMessageSinceID(ctx context.Context, id int64) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getMessageSinceID, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Ip,
			&i.Message,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMessage = `-- name: UpdateMessage :one
UPDATE message
SET name = ?, ip = ?, message = ?
WHERE id = ?
RETURNING id, name, ip, message, created_at
`

type UpdateMessageParams struct {
	Name    string
	Ip      string
	Message string
	ID      int64
}

func (q *Queries) UpdateMessage(ctx context.Context, arg UpdateMessageParams) (Message, error) {
	row := q.db.QueryRowContext(ctx, updateMessage,
		arg.Name,
		arg.Ip,
		arg.Message,
		arg.ID,
	)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Ip,
		&i.Message,
		&i.CreatedAt,
	)
	return i, err
}
