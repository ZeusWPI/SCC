// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: spotify.sql

package sqlc

import (
	"context"
)

const createSpotify = `-- name: CreateSpotify :one
INSERT INTO spotify (title, artists, spotify_id, duration_ms)
VALUES (?, ?, ?, ?)
RETURNING id, title, artists, spotify_id, duration_ms, created_at
`

type CreateSpotifyParams struct {
	Title      string
	Artists    string
	SpotifyID  string
	DurationMs int64
}

func (q *Queries) CreateSpotify(ctx context.Context, arg CreateSpotifyParams) (Spotify, error) {
	row := q.db.QueryRowContext(ctx, createSpotify,
		arg.Title,
		arg.Artists,
		arg.SpotifyID,
		arg.DurationMs,
	)
	var i Spotify
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Artists,
		&i.SpotifyID,
		&i.DurationMs,
		&i.CreatedAt,
	)
	return i, err
}

const deleteSpotify = `-- name: DeleteSpotify :execrows
DELETE FROM spotify
WHERE id = ?
`

func (q *Queries) DeleteSpotify(ctx context.Context, id int64) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteSpotify, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getAllSpotify = `-- name: GetAllSpotify :many

SELECT id, title, artists, spotify_id, duration_ms, created_at
FROM spotify
`

// CRUD
func (q *Queries) GetAllSpotify(ctx context.Context) ([]Spotify, error) {
	rows, err := q.db.QueryContext(ctx, getAllSpotify)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Spotify
	for rows.Next() {
		var i Spotify
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Artists,
			&i.SpotifyID,
			&i.DurationMs,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSpotifyByID = `-- name: GetSpotifyByID :one
SELECT id, title, artists, spotify_id, duration_ms, created_at
FROM spotify
WHERE id = ?
`

func (q *Queries) GetSpotifyByID(ctx context.Context, id int64) (Spotify, error) {
	row := q.db.QueryRowContext(ctx, getSpotifyByID, id)
	var i Spotify
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Artists,
		&i.SpotifyID,
		&i.DurationMs,
		&i.CreatedAt,
	)
	return i, err
}

const getSpotifyBySpotifyID = `-- name: GetSpotifyBySpotifyID :one

SELECT id, title, artists, spotify_id, duration_ms, created_at
FROM spotify
WHERE spotify_id = ?
`

// Other
func (q *Queries) GetSpotifyBySpotifyID(ctx context.Context, spotifyID string) (Spotify, error) {
	row := q.db.QueryRowContext(ctx, getSpotifyBySpotifyID, spotifyID)
	var i Spotify
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Artists,
		&i.SpotifyID,
		&i.DurationMs,
		&i.CreatedAt,
	)
	return i, err
}

const updateSpotify = `-- name: UpdateSpotify :one
UPDATE spotify
SET title = ?, artists = ?, spotify_id = ?, duration_ms = ?
WHERE id = ?
RETURNING id, title, artists, spotify_id, duration_ms, created_at
`

type UpdateSpotifyParams struct {
	Title      string
	Artists    string
	SpotifyID  string
	DurationMs int64
	ID         int64
}

func (q *Queries) UpdateSpotify(ctx context.Context, arg UpdateSpotifyParams) (Spotify, error) {
	row := q.db.QueryRowContext(ctx, updateSpotify,
		arg.Title,
		arg.Artists,
		arg.SpotifyID,
		arg.DurationMs,
		arg.ID,
	)
	var i Spotify
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Artists,
		&i.SpotifyID,
		&i.DurationMs,
		&i.CreatedAt,
	)
	return i, err
}
