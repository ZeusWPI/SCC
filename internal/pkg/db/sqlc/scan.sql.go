// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: scan.sql

package sqlc

import (
	"context"
	"time"
)

const createScan = `-- name: CreateScan :one
INSERT INTO scan (scan_time)
VALUES (?)
RETURNING id, scan_time
`

func (q *Queries) CreateScan(ctx context.Context, scanTime time.Time) (Scan, error) {
	row := q.db.QueryRowContext(ctx, createScan, scanTime)
	var i Scan
	err := row.Scan(&i.ID, &i.ScanTime)
	return i, err
}

const deleteScan = `-- name: DeleteScan :execrows
DELETE FROM scan
WHERE id = ?
`

func (q *Queries) DeleteScan(ctx context.Context, id int64) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteScan, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getAllScans = `-- name: GetAllScans :many

SELECT id, scan_time
FROM scan
`

// CRUD
func (q *Queries) GetAllScans(ctx context.Context) ([]Scan, error) {
	rows, err := q.db.QueryContext(ctx, getAllScans)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Scan
	for rows.Next() {
		var i Scan
		if err := rows.Scan(&i.ID, &i.ScanTime); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllScansSinceID = `-- name: GetAllScansSinceID :many
SELECT id, scan_time
FROM scan
WHERE id > ?
ORDER BY scan_time ASC
`

func (q *Queries) GetAllScansSinceID(ctx context.Context, id int64) ([]Scan, error) {
	rows, err := q.db.QueryContext(ctx, getAllScansSinceID, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Scan
	for rows.Next() {
		var i Scan
		if err := rows.Scan(&i.ID, &i.ScanTime); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLastScan = `-- name: GetLastScan :one


SELECT id, scan_time
FROM scan
ORDER BY id DESC
LIMIT 1
`

// Other
func (q *Queries) GetLastScan(ctx context.Context) (Scan, error) {
	row := q.db.QueryRowContext(ctx, getLastScan)
	var i Scan
	err := row.Scan(&i.ID, &i.ScanTime)
	return i, err
}

const getScanByID = `-- name: GetScanByID :one
SELECT id, scan_time
FROM scan
WHERE id = ?
`

func (q *Queries) GetScanByID(ctx context.Context, id int64) (Scan, error) {
	row := q.db.QueryRowContext(ctx, getScanByID, id)
	var i Scan
	err := row.Scan(&i.ID, &i.ScanTime)
	return i, err
}

const getScansInCurrentSeason = `-- name: GetScansInCurrentSeason :one
SELECT COUNT(*) AS amount
FROM scan
WHERE scan_time >= (SELECT start_date FROM season WHERE current = true) AND
        scan_time <= (SELECT end_date FROM season WHERE current = true)
`

func (q *Queries) GetScansInCurrentSeason(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getScansInCurrentSeason)
	var amount int64
	err := row.Scan(&amount)
	return amount, err
}

const updateScan = `-- name: UpdateScan :one
UPDATE scan
SET scan_time = ?
WHERE id = ?
RETURNING id, scan_time
`

type UpdateScanParams struct {
	ScanTime time.Time
	ID       int64
}

func (q *Queries) UpdateScan(ctx context.Context, arg UpdateScanParams) (Scan, error) {
	row := q.db.QueryRowContext(ctx, updateScan, arg.ScanTime, arg.ID)
	var i Scan
	err := row.Scan(&i.ID, &i.ScanTime)
	return i, err
}
