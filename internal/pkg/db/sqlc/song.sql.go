// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: song.sql

package sqlc

import (
	"context"
)

const createSong = `-- name: CreateSong :one
INSERT INTO song (title, artists, spotify_id, duration_ms)
VALUES (?, ?, ?, ?)
RETURNING id, title, artists, spotify_id, duration_ms
`

type CreateSongParams struct {
	Title      string
	Artists    string
	SpotifyID  string
	DurationMs int64
}

func (q *Queries) CreateSong(ctx context.Context, arg CreateSongParams) (Song, error) {
	row := q.db.QueryRowContext(ctx, createSong,
		arg.Title,
		arg.Artists,
		arg.SpotifyID,
		arg.DurationMs,
	)
	var i Song
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Artists,
		&i.SpotifyID,
		&i.DurationMs,
	)
	return i, err
}

const deleteSong = `-- name: DeleteSong :execrows
DELETE FROM song
WHERE id = ?
`

func (q *Queries) DeleteSong(ctx context.Context, id int64) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteSong, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getAllSongs = `-- name: GetAllSongs :many

SELECT id, title, artists, spotify_id, duration_ms
FROM song
`

// CRUD
func (q *Queries) GetAllSongs(ctx context.Context) ([]Song, error) {
	rows, err := q.db.QueryContext(ctx, getAllSongs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Song
	for rows.Next() {
		var i Song
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Artists,
			&i.SpotifyID,
			&i.DurationMs,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSongByID = `-- name: GetSongByID :one
SELECT id, title, artists, spotify_id, duration_ms
FROM song
WHERE id = ?
`

func (q *Queries) GetSongByID(ctx context.Context, id int64) (Song, error) {
	row := q.db.QueryRowContext(ctx, getSongByID, id)
	var i Song
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Artists,
		&i.SpotifyID,
		&i.DurationMs,
	)
	return i, err
}

const getSongBySpotifyID = `-- name: GetSongBySpotifyID :one

SELECT id, title, artists, spotify_id, duration_ms
FROM song
WHERE spotify_id = ?
`

// Other
func (q *Queries) GetSongBySpotifyID(ctx context.Context, spotifyID string) (Song, error) {
	row := q.db.QueryRowContext(ctx, getSongBySpotifyID, spotifyID)
	var i Song
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Artists,
		&i.SpotifyID,
		&i.DurationMs,
	)
	return i, err
}

const updateSong = `-- name: UpdateSong :one
UPDATE song
SET title = ?, artists = ?, spotify_id = ?, duration_ms = ?
WHERE id = ?
RETURNING id, title, artists, spotify_id, duration_ms
`

type UpdateSongParams struct {
	Title      string
	Artists    string
	SpotifyID  string
	DurationMs int64
	ID         int64
}

func (q *Queries) UpdateSong(ctx context.Context, arg UpdateSongParams) (Song, error) {
	row := q.db.QueryRowContext(ctx, updateSong,
		arg.Title,
		arg.Artists,
		arg.SpotifyID,
		arg.DurationMs,
		arg.ID,
	)
	var i Song
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Artists,
		&i.SpotifyID,
		&i.DurationMs,
	)
	return i, err
}
