// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: event.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO event (name, date, academic_year, location, poster)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, name, date, academic_year, location, poster
`

type CreateEventParams struct {
	Name         string
	Date         pgtype.Timestamptz
	AcademicYear string
	Location     string
	Poster       []byte
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, createEvent,
		arg.Name,
		arg.Date,
		arg.AcademicYear,
		arg.Location,
		arg.Poster,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Date,
		&i.AcademicYear,
		&i.Location,
		&i.Poster,
	)
	return i, err
}

const deleteEvent = `-- name: DeleteEvent :exec
DELETE FROM event
WHERE id = $1
`

func (q *Queries) DeleteEvent(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteEvent, id)
	return err
}

const deleteEventByAcademicYear = `-- name: DeleteEventByAcademicYear :exec
DELETE FROM event
WHERE academic_year = $1
`

func (q *Queries) DeleteEventByAcademicYear(ctx context.Context, academicYear string) error {
	_, err := q.db.Exec(ctx, deleteEventByAcademicYear, academicYear)
	return err
}

const getAllEvents = `-- name: GetAllEvents :many


SELECT id, name, date, academic_year, location, poster
FROM event
`

// CRUD
func (q *Queries) GetAllEvents(ctx context.Context) ([]Event, error) {
	rows, err := q.db.Query(ctx, getAllEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Date,
			&i.AcademicYear,
			&i.Location,
			&i.Poster,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEventByAcademicYear = `-- name: GetEventByAcademicYear :many


SELECT id, name, date, academic_year, location, poster
FROM event
WHERE academic_year = $1
`

// Other
func (q *Queries) GetEventByAcademicYear(ctx context.Context, academicYear string) ([]Event, error) {
	rows, err := q.db.Query(ctx, getEventByAcademicYear, academicYear)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Date,
			&i.AcademicYear,
			&i.Location,
			&i.Poster,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEventsCurrentAcademicYear = `-- name: GetEventsCurrentAcademicYear :many
SELECT id, name, date, academic_year, location, poster
FROM event
WHERE academic_year = (
    SELECT MAX(academic_year)
    FROM event
)
ORDER BY date ASC
`

func (q *Queries) GetEventsCurrentAcademicYear(ctx context.Context) ([]Event, error) {
	rows, err := q.db.Query(ctx, getEventsCurrentAcademicYear)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Date,
			&i.AcademicYear,
			&i.Location,
			&i.Poster,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
